# GitLab CI Runner 101 {#sec-gitlab-ci-runner-101}

## Install self-managed runners

:::{.callout-important}

Full documentation at <https://docs.gitlab.com/runner/install/index.html>.

:::

```bash
curl -LJO "https://gitlab-runner-downloads.s3.amazonaws.com/latest/deb/gitlab-runner_amd64.deb"
```

```bash
sudo dpkg -i gitlab-runner_amd64.deb
```

## Configure self-managed runners

Is preferable to have non-root runners.

Create the configuration file `~/.gitlab-runner/config.toml` and add

```
concurrent = 1
check_interval = 0

[session_server]
  session_timeout = 1800
```

Create `/etc/systemd/system/gitlab-runner-username.service` and add

```
[Unit]
Description=GitLab Runner as username
After=syslog.target network.target
ConditionFileIsExecutable=/usr/local/bin/gitlab-runner

[Service]
StartLimitInterval=5
StartLimitBurst=10
ExecStart=/usr/local/bin/gitlab-runner "run" "--working-directory" "/home/username" "--config" "/home/username/.gitlab-runner/config.toml" "--service" "gitlab-runner-username" "--syslog" "--user" "username"

Restart=always
RestartSec=120

[Install]
WantedBy=multi-user.target
```

Start the daemon:

```bash
sudo systemctl start gitlab-runner-username
```

```bash
sudo systemctl enable gitlab-runner-username
```

:::{.callout-important}

On Debian and Ubuntu, the file default `/home/username/.bash_logout` makes the runner to not clone the Git repository as explained in <https://forum.gitlab.com/t/gitlab-runner-as-non-root-does-not-clone-repo/21935/6>.

:::

## Get status

```bash
sudo gitlab-runner status
```

## List runners

```bash
gitlab-runner list
```

## Create runner

```bash
gitlab-runner register
```

## Remove runner

```bash
gitlab-runner unregister --name runner_name
```

## Remove all runners

```bash
gitlab-runner verify --delete
```

```bash
gitlab-runner unregister --all-runners
```

## Troubleshooting

Add

```
variables:
  CI_DEBUG_TRACE: "true"
```

to the job that is failing.