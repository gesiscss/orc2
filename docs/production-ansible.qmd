# Ansible

[Ansible](https://www.ansible.com/) is a configuration management tool that can be used to configure **bare metal** servers with the right software.

:::{.callout-important}

Ansible has fundametal differences to [Terraform](https://www.terraform.io/), a provisioning tool.

:::

## Preparation

Create user `ansible`.

::: {.panel-tabset}

## Master machine at `194.95.75.10`

```bash
sudo adduser \
    --gecos ansible,,, \
    ansible
```

```bash
sudo usermod -aG sudo ansible
```

## Worker machine at `194.95.75.9`

```bash
sudo adduser \
    --gecos ansible,,, \
    ansible
```

```bash
sudo usermod -aG sudo ansible
```

:::

Avoid ask for password to user `ansible`:

::: {.panel-tabset}

## Master machine at `194.95.75.20`

Use `sudoedit /etc/sudoers.d/20_servers_admins` to add

```
ansible ALL=(ALL) NOPASSWD: ALL
```

## Worker machine at `194.95.75.14`

Use `sudoedit /etc/sudoers.d/20_servers_admins` to add

```
ansible ALL=(ALL) NOPASSWD: ALL
```

:::

To test if `sudo` without password is working, you can first disable current `sudo` with

```
sudo -k
```

and run

```
sudo cat /etc/sudoers.d/20_servers_admins
```

or any other shell command prepended with `sudo`.

Create SSH key for user `ansible`:

::: {.panel-tabset}

## Master machine at `194.95.75.10`

```bash
su ansible
```

```bash
ssh-keygen \
    -t ed25519 \
    -N '' \
    -C "ansible@notebooks.gesis.org" \
    -f ~/.ssh/id_ed25519
```

```bash
ssh-copy-id ansible@194.95.75.9
```

```bash
exit
```

## Worker machine at `194.95.75.9`

Nothing to do here.

:::

Disable password authentication for user `ansible`:

::: {.panel-tabset}

## Master machine at `194.95.75.20`

Add

```
Match User ansible
    PasswordAuthentication no
```

to `/etc/ssh/sshd_config` and restart the SSH server:

```bash
sudo systemctl restart ssh
```

## Worker machine at `194.95.75.14`

Add

```
Match User ansible
    PasswordAuthentication no
```

to `/etc/ssh/sshd_config` and restart the SSH server:

```bash
sudo systemctl restart ssh
```

:::

## Installation

In the control panel server (`194.95.75.10`), run

```bash
sudo apt install -y \
    ansible
```

## Inventory

Ansible requires a list of servers that it can access. Edit `/etc/ansible/hosts` to be like

```ansible
[notebooks_gesis_org]
194.95.75.9
```

Check that your inventory is correct:

```bash
ansible all --list-hosts
```

```
  hosts (1):
    194.95.75.9
```

Check that the servers are accessible:

```bash
ansible all -m ping
```

```
194.95.75.9 | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python3"
    },
    "changed": false,
    "ping": "pong"
}
```

## Playbook

Playbook is the rules that Ansible uses to configure the servers. For example,

```
- name: My first play
  hosts: notebooks_gesis_org
  tasks:
   - name: Ping my hosts
     ansible.builtin.ping:
   - name: Print message
     ansible.builtin.debug:
       msg: Hello world
```

The instructions in the playbook can be executed by running

```bash
ansible-playbook playbook.yaml
```

where `playbook.yaml` is the file storing the playbook.
