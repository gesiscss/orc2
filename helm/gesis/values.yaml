# Use https://github.com/jupyterhub/mybinder.org-deploy/blob/main/mybinder/values.yaml as reference

binderhub:
  pdb:
    maxUnavailable: 1

  replicas: 2

  resources:
    requests:
      cpu: "0.25"
      memory: 1Gi
    limits:
      cpu: "2"
      memory: 1Gi

  config:
    BinderHub:
      pod_quota: 100
      
      base_url: /binder/
      hub_url: https://notebooks.gesis.org/binder/jupyter/
      image_prefix: gesiscss/binder-r2d-g5b5b759-

      use_registry: true

      build_image: quay.io/jupyterhub/repo2docker:2022.10.0-163.gd3c7441

      per_repo_quota: 100
      per_repo_quota_higher: 200

      template_path: /etc/binderhub/templates

      cors_allow_origin: '*'

    LaunchQuota:
      total_quota: 120

    BuildExecutor:
      memory_limit: "8G"

    KubernetesBuildExecutor:
      memory_request: "1G"
      memory_limit: "3G"
      node_selector:
        binderhub: "true"

    GitHubRepoProvider:
      banned_specs:
        - ^a2nk/.*
        - ^imhajes/.*
        - ^ines/spacy-binder.*
        - ^soft4voip/rak.*
        - ^hmharshit/cn-ait.*
        - ^shishirchoudharygic/mltraining.*
        - ^hmharshit/mltraining.*
        - ^FDesnoyer/MathExp.*
        - ^GuitarsAI/.*
        - ^ferarussia/.*
        - ^ayman107/.*
        - ^Miner2008001/.*

      high_quota_specs:
        - ^gesiscss/.*

    GitLabRepoProvider:
      banned_specs:
        - ^h4j3s1978%2F.*
        - ^jasmt507%2F.*
        - .*%2Fabooz.*

    GitRepoProvider:
      banned_specs:
        - ^(git|https?)%3A%2F%2Fgithub.com%2Fa2nk%2F.*
        - ^https%3A%2F%2Fbitbucket.org%2Fnikiubel%2Fnikiubel.bitbucket.io.git/.*
        - ^https%3A%2F%2Fjovian.ml%2Fapi%2Fgit%2F.*
        - ^https%3A%2F%2Fframagit.org%2FCecGhesq%2Flic_mdf_nsi_1.*
        - ^(git|https?)%3A%2F%2Fnotabug.org%2FulslcuRux3Y%2F.*
        - ^(git|https?)%3A%2F%2Fgitlab.com%2Fjasmt507%2F.*
        - ^(git|https?)%3A%2F%2Fgitlab.com%2Fh4j3s1978%2F.*
        - .*%2Fabooz.*
        - .*%2Firw4ns1.*

  podAnnotations:
    rollme: "rollme"

  extraVolumes:
    - name: binder-templates
      configMap:
        name: binder-templates
    - name: binder-templates-gesis
      configMap:
        name: binder-templates-gesis
  
  extraVolumeMounts:
    - name: binder-templates
      mountPath: /etc/binderhub/templates
    - name: binder-templates-gesis
      mountPath: /etc/binderhub/templates/gesis

  extraConfig:
    # Send Events to StackDriver on Google Cloud
    # This doesn't need any extra permissions, since the GKE nodes have
    # permission to write to StackDriver by default. We don't block access
    # to cloud metadata in binderhub pod, so this should 'just work'.
    01-eventlog: |
      import os
      import google.cloud.logging
      import google.cloud.logging.handlers
      # importing google cloud configures a root log handler,
      # which prevents tornado's pretty-logging
      import logging
      logging.getLogger().handlers = []

      class JSONCloudLoggingHandler(google.cloud.logging.handlers.CloudLoggingHandler):
          def emit(self, record):
              record.name = None
              super().emit(record)

      def _make_eventsink_handler(el):
          client = google.cloud.logging.Client()
          # These events are not parsed as JSON in stackdriver, so give it a different name
          # for now. Should be fixed in https://github.com/googleapis/google-cloud-python/pull/6293
          return [JSONCloudLoggingHandler(client, name=os.environ.get("EVENT_LOG_NAME") or "binderhub-events-text")]
      c.EventLog.handlers_maker = _make_eventsink_handler

    01-template-variables:  |
      import uuid
      template_vars = {
          "version": "beta",
          "home_url": "/",
          "gesisbinder_url": "/binder/",
          "about_url": "/about.html",
          "tou_url": "/terms.html",
          "imprint_url": "https://www.gesis.org/en/institute/imprint/",
          "data_protection_url": "https://www.gesis.org/en/institute/data-protection/",
          "gesis_url": "https://www.gesis.org/en/home/",
          "status_url": "https://gesisnotebooks.betteruptime.com",
          "gallery_url": "/gallery/",
          "faq_url": "/faq.html",
          "active": "binder",
          "static_nginx": "/static/",
          "static_version": uuid.uuid4().hex,
          "user": None,
          "production": True,
      }
      c.BinderHub.template_variables.update(template_vars)

  service:
    type: NodePort
    nodePort: 30081

  imageBuilderType: dind
  dind:
    resources:
      requests:
        cpu: "0.5"
        memory: 1Gi
      limits:
        cpu: "4"
        memory: 4Gi
    daemonset:
      extraArgs:
        - "--mtu=1000"

  imageCleaner:
    enabled: true
    # when 80% of inodes are used,
    # cull images until only 40% are used.
    imageGCThresholdHigh: 80
    imageGCThresholdLow: 40

  jupyterhub:
    cull:
      # cull every 11 minutes so it is out of phase
      # with the proxy check-routes interval of five minutes
      every: 660
      timeout: 600
      # maxAge is 1 hours: 1 * 3600 = 3600
      maxAge: 3600
    hub:
      # NOTE: hub and proxy must have 1 pod (https://github.com/jupyterhub/jupyterhub/issues/2841#issuecomment-561848594)
      # replicas: 1
      pdb:
        minAvailable: 0
      networkPolicy:
        # z2jh chart has a default ingress rule which allows inbound traffic
        # only to port 8081 (API port)
        # from pods with label "hub.jupyter.org/network-access-hub",
        # user and proxy pods have this label
        # z2jh chart has a default egress rule: allow all outbound traffic for hub
        enabled: true
      nodeSelector:
        database: postgresql
      baseUrl: /binder/jupyter/
      db:
        type: postgres
      authenticatePrometheus: false
      config:
        BinderSpawner:
          cors_allow_origin: '*'
      extraConfig:
        02-orc: |
          c.KubeSpawner.extra_pod_config.update({'restart_policy': 'Never'})
    proxy:
      service:
        type: NodePort
        nodePorts:
          http: 30085
          https: 30082
      https:
        # https://github.com/jupyterhub/zero-to-jupyterhub-k8s/blob/master/CHANGELOG.md#breaking-changes
        # for z2jh 0.10.0+ https needs to be enabled.
        enabled: true
        type: offload
      chp:
        networkPolicy:
          # z2jh chart has a default ingress rule which allows inbound traffic
          # to port 8000 (HTTP port) from pods with label "hub.jupyter.org/network-access-proxy-HTTP" and
          # to port 8001 (API port) from pods with label "hub.jupyter.org/network-access-proxy-API",
          # and only hub pod has these labels
          # so only the hub pod can talk to the proxy's API and HTTP ports
          # z2jh chart has a default egress rule: allow all outbound traffic for proxy
          enabled: true
        # NOTE: hub and proxy must have 1 pod (https://github.com/jupyterhub/jupyterhub/issues/2841#issuecomment-561848594)
        # replicas: 1
        # PDB relocated to proxy.chp.pdb https://github.com/jupyterhub/zero-to-jupyterhub-k8s/pull/1938
        pdb:
          minAvailable: 0
    singleuser:
      networkPolicy:
        enabled: true
        # z2jh chart has a default ingress rule which allows inbound traffic
        # only to port 8888
        # from pods with label "hub.jupyter.org/network-access-singleuser",
        # hub and proxy pods have this label
        #ingress: []
        # z2jh chart has a default egress rule which restricts outbound traffic to only JupyterHub API port
        egress: []  # no additional egress rule, this empty list also overrides the egress rule defined in values.yaml of z2jh
      nodeSelector:
        binderhub: "true"
      storage:
        extraVolumes:
          - name: etc-jupyter
            configMap:
              name: user-etc-jupyter
          - name: etc-jupyter-templates
            configMap:
              name: user-etc-jupyter-templates
        extraVolumeMounts:
          - name: etc-jupyter
            mountPath: /etc/jupyter
          - name: etc-jupyter-templates
            mountPath: /etc/jupyter/templates

    # Because we have only 1 node for user pods
    scheduling:
      userScheduler:
        enabled: true
      podPriority:
        enabled: true
      userPlaceholder:
        enabled: true

etcJupyter:
  jupyter_notebook_config.json:
    NotebookApp:
      allow_origin: "*"
      tornado_settings:
        trust_xheaders: true
      # shutdown the server after no activity
      shutdown_no_activity_timeout: 600

    # if a user leaves a notebook with a running kernel,
    # the effective idle timeout will typically be CULL_TIMEOUT + CULL_KERNEL_TIMEOUT
    # as culling the kernel will register activity,
    # resetting the no_activity timer for the server as a whole
    MappingKernelManager:
      # shutdown kernels after no activity
      cull_idle_timeout: 600
      # check for idle kernels this often
      cull_interval: 60
      # a kernel with open connections but no activity still counts as idle
      # this is what allows us to shutdown servers
      # when people leave a notebook open and wander off
      cull_connected: true

# Send GESIS Binder events to mybinder.org's StackDriver
# must be override in _secret.yaml
eventsArchiver:
  serviceAccountKey: ""

cryptnono:
  enabled: true
  tolerations:
    # deploy anti-cryptomining cryptnono on all nodes
    - effect: NoSchedule
      key: hub.jupyter.org/dedicated
      operator: Equal
      value: user
    - effect: NoSchedule
      key: hub.jupyter.org_dedicated
      operator: Equal
      value: user

prometheus:
  enabled: true
  alertmanager:
    enabled: false
  prometheus-pushgateway:
    enabled: false
  server:
    podLabels:
      # needs access to the Hub API
      hub.jupyter.org/network-access-hub: "true"
    strategy:
      # The default of RollingUpdate fail because attached storage can only be
      # mounted on one pod, so we need to use Recreate that first shut down the
      # pod and then starts it up during updates.
      type: Recreate
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: nginx
        kubernetes.io/tls-acme: "true"

  # make sure we collect metrics on pods by app/component at least
  kube-state-metrics:
    metricLabelsAllowlist:
      - pods=[app,component]
      - nodes=[*]

grafana:
  enabled: true
  
  service:
    type: NodePort
    port: 80
    nodePort: 30075

  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"

  # deploymentStrategy.type is set to Recreate as we have storage that can only
  # be attached once, we can't have two replicas as RollingUpdate leads to.
  deploymentStrategy:
    type: Recreate
  persistence:
    enabled: true
    size: 1Gi
    accessModes:
      - ReadWriteOnce

  grafana.ini:
    auth.anonymous:
      enabled: true
      org_name: Main Org.
      org_role: Viewer
    auth.basic:
      enabled: true
    smtp:
      enabled: true
    security:
      allow_embedding: true
    server:
      root_url: "https://notebooks.gesis.org/grafana/"
      http_port: 3000

nfs:
  enabled: true
  storageClass:
    name: ssd2nfs-to-docker
    provisionerName: k8s-sigs.io/ssd2nfs-to-docker-nfs-subdir-external-provisioner
  nodeSelector:
    binderhub: "true"
    
