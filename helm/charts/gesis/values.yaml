binderhub:
  config:
    BinderHub:
      base_url: /binder/
      build_node_selector:
        binderhub: 'true'
      cors_allow_origin: '*'
      hub_url: https://notebooks.gesis.org/binder/jupyter/
      image_prefix: gesiscss/binder-r2d-g5b5b759-
      per_repo_quota: 100
      per_repo_quota_higher: 200
      template_path: /etc/binderhub/templates
      use_registry: true
    BuildExecutor:
      memory_limit: 8G
    GitHubRepoProvider:
      high_quota_specs:
      - ^gesiscss/.*
    KubernetesBuildExecutor:
      build_image: quay.io/jupyterhub/repo2docker:2024.07.0-19.gbf618ef
      memory_limit: 3G
      memory_request: 1G
      node_selector:
        binderhub: 'true'
        docker_available: 'true'
  dind:
    daemonset:
      extraArgs:
      - --mtu=1000
    hostLibDir: /orc2_data/repo2docker
    resources:
      limits:
        cpu: '4'
        memory: 4Gi
      requests:
        cpu: '0.5'
        memory: 1Gi
  extraConfig:
    01-eventlog: "import os\nimport google.cloud.logging\nimport google.cloud.logging.handlers\n#
      importing google cloud configures a root log handler,\n# which prevents tornado's
      pretty-logging\nimport logging\nlogging.getLogger().handlers = []\n\nclass JSONCloudLoggingHandler(google.cloud.logging.handlers.CloudLoggingHandler):\n
      \   def emit(self, record):\n        record.name = None\n        super().emit(record)\n\ndef
      _make_eventsink_handler(el):\n    client = google.cloud.logging.Client()\n    #
      These events are not parsed as JSON in stackdriver, so give it a different name\n
      \   # for now. Should be fixed in https://github.com/googleapis/google-cloud-python/pull/6293\n
      \   return [JSONCloudLoggingHandler(client, name=os.environ.get(\"EVENT_LOG_NAME\")
      or \"binderhub-events-text\")]\nc.EventLog.handlers_maker = _make_eventsink_handler\n"
  extraEnv:
    GOOGLE_APPLICATION_CREDENTIALS: /secrets/service-account.json
  extraVolumeMounts:
  - mountPath: /etc/binderhub/templates
    name: binder-templates
  - mountPath: /etc/binderhub/templates/gesis
    name: binder-templates-gesis
  - mountPath: /secrets
    name: secrets
    readOnly: true
  extraVolumes:
  - configMap:
      name: binder-templates
    name: binder-templates
  - configMap:
      name: binder-templates-gesis
    name: binder-templates-gesis
  - name: secrets
    secret:
      secretName: events-archiver-secrets
  imageBuilderType: dind
  imageCleaner:
    enabled: true
    imageGCThresholdHigh: 1600e9
    imageGCThresholdLow: 1000e9
    imageGCThresholdType: absolute
  jupyterhub:
    cull:
      every: 660
      maxAge: 21600
      timeout: 600
    hub:
      authenticatePrometheus: false
      baseUrl: /binder/jupyter/
      config:
        BinderSpawner:
          cors_allow_origin: '*'
      db:
        type: postgres
        upgrade: true
      extraConfig:
        02-orc: 'c.KubeSpawner.extra_pod_config.update({''restart_policy'': ''Never''})

          '
      networkPolicy:
        enabled: false
      nodeSelector:
        database: postgresql
      pdb:
        minAvailable: 0
    proxy:
      chp:
        networkPolicy:
          enabled: false
        pdb:
          minAvailable: 0
      https:
        enabled: true
        type: offload
      service:
        nodePorts:
          http: 30085
          https: 30082
        type: NodePort
    scheduling:
      podPriority:
        enabled: true
      userPlaceholder:
        enabled: true
      userScheduler:
        enabled: true
    singleuser:
      cpu:
        guarantee: 0.01
        limit: 1
      memory:
        guarantee: 450M
        limit: 4G
      networkPolicy:
        enabled: false
      nodeSelector:
        binderhub: 'true'
      storage:
        extraVolumeMounts:
        - mountPath: /etc/jupyter
          name: etc-jupyter
        - mountPath: /etc/jupyter/templates
          name: etc-jupyter-templates
        extraVolumes:
        - configMap:
            name: user-etc-jupyter
          name: etc-jupyter
        - configMap:
            name: user-etc-jupyter-templates
          name: etc-jupyter-templates
  networkPolicy:
    egress:
      cidr: 0.0.0.0/0
      tcpPorts:
      - 80
      - 443
      - 9418
      - 873
      - 1094
      - 1095
      - 16286
      - 4001
    enabled: true
    ingress:
      bannedIps: []
  nodeSelector:
    binderhub: 'true'
  pdb:
    maxUnavailable: 1
  podAnnotations:
    rollme: rollme
  replicas: 2
  resources:
    limits:
      cpu: '2'
      memory: 1Gi
    requests:
      cpu: '0.25'
      memory: 1Gi
  service:
    annotations:
      prometheus.io/path: /binder/metrics
      prometheus.io/port: '8585'
      prometheus.io/scrape: 'true'
    nodePort: 30081
    type: NodePort
cryptnono:
  enabled: true
  tolerations:
  - effect: NoSchedule
    key: hub.jupyter.org/dedicated
    operator: Equal
    value: user
  - effect: NoSchedule
    key: hub.jupyter.org_dedicated
    operator: Equal
    value: user
etcJupyter:
  jupyter_notebook_config.json:
    MappingKernelManager:
      cull_connected: true
      cull_idle_timeout: 600
      cull_interval: 60
    NotebookApp:
      allow_origin: '*'
      shutdown_no_activity_timeout: 600
      tornado_settings:
        trust_xheaders: true
eventsArchiver:
  serviceAccountKey: ''
grafana:
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - disableDeletion: true
        editable: false
        folder: notebooks.gesis.org
        name: default
        options:
          path: /var/lib/grafana/dashboards/notebooks.gesis.org
        orgId: 1
        type: file
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - editable: false
        isDefault: true
        name: GESIS Notebooks Prometheus
        orgId: 1
        type: prometheus
        uid: gesis-notebooks-prometheus
        url: http://binderhub-prometheus-server
      prune: true
  deploymentStrategy:
    type: Recreate
  enabled: true
  extraVolumeMounts:
  - mountPath: /var/lib/grafana/dashboards/notebooks.gesis.org
    name: dashboard-volume
    readOnly: true
  extraVolumes:
  - configMap:
      name: grafana-dashboard-config-map
    name: dashboard-volume
  grafana.ini:
    auth.anonymous:
      enabled: true
      org_name: Main Org.
      org_role: Viewer
    auth.basic:
      enabled: true
    security:
      allow_embedding: true
    server:
      http_port: 3000
      root_url: https://notebooks.gesis.org/grafana/
    smtp:
      enabled: true
  ingress:
    annotations:
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: 'true'
    enabled: true
  persistence:
    accessModes:
    - ReadWriteOnce
    enabled: false
    size: 1Gi
    storageClassName: standard
  service:
    nodePort: 30075
    port: 80
    type: NodePort
minesweeper:
  enabled: true
  image: jupyterhub/mybinder.org-minesweeper:2020.12.4-0.dev.git.5080.hf35cc80d
  nodeSelector:
    binderhub: 'true'
prometheus:
  alertmanager:
    enabled: false
  enabled: true
  kube-state-metrics:
    metricLabelsAllowlist:
    - pods=[app,component]
    - nodes=[*]
  prometheus-pushgateway:
    enabled: false
  server:
    ingress:
      annotations:
        kubernetes.io/ingress.class: nginx
        kubernetes.io/tls-acme: 'true'
      enabled: true
    podLabels:
      hub.jupyter.org/network-access-hub: 'true'
    strategy:
      type: Recreate
proxyPatches:
  enabled: true
  nodeSelector: {}
harbor:
  expose:
    type: nodePort
    tls:
      enabled: false
    nodePort:
      name: harbor
    persistence:
      enabled: false
  affinity:
    requiredDuringSchedulingRequiredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: harbor
          operator: In
          values:
          - 'true'
  persistence:
    enabled: true
    # Setting it to "keep" to avoid removing PVCs during a helm delete
    # operation. Leaving it empty will delete PVCs after the chart deleted
    # (this does not apply for PVCs that are created for internal database
    # and redis components, i.e. they are never deleted automatically)
    resourcePolicy: ""
    persistentVolumeClaim:
      registry:
        # Use the existing PVC which must be created manually before bound,
        # and specify the "subPath" if the PVC is shared with other components
        existingClaim: "harbor-registry"
        # Specify the "storageClass" used to provision the volume. Or the default
        # StorageClass will be used (the default).
        # Set it to "-" to disable dynamic provisioning
        storageClass: "standard"
        subPath: ""
        accessMode: ReadWriteMany
        size: 5Gi
      jobservice:
        jobLog:
          existingClaim: "harbor-jobservice"
          storageClass: "standard"
          subPath: ""
          accessMode: ReadWriteMany
          size: 1Gi
          annotations: {}
      # If external database is used, the following settings for database will
      # be ignored
      database:
        existingClaim: "harbor-database"
        storageClass: "standard"
        subPath: ""
        accessMode: ReadWriteMany
        size: 1Gi
        annotations: {}
      # If external Redis is used, the following settings for Redis will
      # be ignored
      redis:
        existingClaim: "harbor-redis"
        storageClass: "standard"
        subPath: ""
        accessMode: ReadWriteMany
        size: 1Gi
        annotations: {}
      trivy:
        existingClaim: "harbor-trivy"
        storageClass: "standard"
        subPath: ""
        accessMode: ReadWriteMany
        size: 5Gi
        annotations: {}
